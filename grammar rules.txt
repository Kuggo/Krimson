ValueNode: Literal | Name
Expression: ValueNode | BinaryOperatorNode | UnaryOperatorNode | FunctionCall
UnaryOperatorNode: Operator Expression
BinaryOperatorNode: Expression Operator Expression
FunctionCall: word '(' {Expression} ')'
WhileNode: 'while' Expression Statement
IfNode: 'if' Expression Statement ['else' Statement]
ReturnNode: 'return'
ScopeNode: '{' Statement* '}'
BreakNode: 'break'
SkipNode: 'skip'
VarAssignNode: Name '=' Expression
VarDefineNode: Name [Name]
FuncDefineNode: Name '(' {VarDefineNode} ')' Statement
TypeDefineNode: 'type' Name '{' (VarDefineNode)* '}'
Statement: Expression | WhileNode | IfNode | ReturnNode | BreakNode | SkipNode | ScopeNode | VarAssignNode | VarDefineNode | FuncDefineNode | TypeDefineNode