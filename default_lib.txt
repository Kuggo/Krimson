// built in functions

func null print(int n) {
    urcl {
        "LLOD R1 SP 1"
        "OUT %NUM R1"
    }
}

func null print(uint n) {
    urcl {
        "LLOD R1 SP 1"
        "OUT %NUM R1"
    }
}

func null print(char c) {
    urcl {
        "LLOD R1 SP 1"
        "OUT %TEXT R1"
    }
}

func null print(string s) {
    urcl {
        "LLOD R1 SP 1"
        "SUB R2 R1 4"     // accessing its metadata (length)
        "LOD R2 R2"
        "SUB R2 R2 4"     // subtracting metadata space
        "LOD $3 $1"       // overwriting BP should be illegal but here it's fine because I know what im doing B)
        "OUT %TEXT $3"
        "INC $1 $1"
        "DEC $2 $2"
        "BNZ ~-4 $2"
    }

    // or it could be written mostly in krimson

    //for (int i = 0; i < s.length; i++) {
    //    print(s[i])
    //}
}

func null display(uint x, uint y, uint color = 1) {
    urcl {
        "LLOD R1 SP 1"
        "OUT %X R1"
        "LLOD R1 SP 2"
        "OUT %Y R1"
        "LLOD R1 SP 3"
        "OUT %COLOR R1"
    }
}




// Default Classes

class __bool__ {
    func bool __or__(bool me, bool other) {
        return me || other
    }

    func bool __and__(bool me, bool other) {
        return me && other
    }

    func bool __xor__(bool me, bool other) {
        return me ^ other
    }

    func bool __not__(bool me) {
        return !me
    }
}

class __int__ {
    func uint __uint__(int me) {
        return me
    }

    func int __add__(int me, int other) {
        return me + other
    }

    func int __sub__(int me, int other) {
        return me - other
    }

    func int __inc__(int me, int other) {
        return me++
    }

    func int __dec__(int me, int other) {
        return me--
    }

    func int __shr__(int me, uint amount) {
        return me >> other
    }

    func int __shl__(int me, uint amount) {
        return me << other
    }

    func int __mlt__(int me, int other) {
        return me * other
    }

    func int __div__(int me, int other) {
        return me / other
    }

    func int __neg__(int me) {
        return -me
    }

    func int __bor__(int me, int other) {
        return me | other
    }

    func int __band__(int me, int other) {
        return me & other
    }

    func int __bxor__(int me, int other) {
        return me ^ other
    }

    func int __bnot__(int me) {
        return ~me
    }

    func bool __gt__(int me, int other) {
        return me > other
    }

    func bool __gte__(int me, int other) {
        return me >= other
    }

    func bool __lt__(int me, int other) {
        return me < other
    }

    func bool __lte__(int me, int other) {
        return me <= other
    }

    func bool __dif__(int me, int other) {
        return me != other
    }

    func bool __equ__(int me, int other) {
        return me == other
    }
}

class __uint__ {
    func int __uint__(uint me) {
        return me
    }

    func uint __add__(uint me, uint other) {
        return me + other
    }

    func uint __sub__(uint me, uint other) {
        return me - other
    }

    func int __inc__(uint me, uint other) {
        return me++
    }

    func int __dec__(uint me, uint other) {
        return me--
    }

    func uint __shr__(uint me, uint amount) {
        return me >> other
    }

    func uint __shl__(uint me, uint amount) {
        return me << other
    }

    func uint __mlt__(uint me, uint other) {
        return me * other
    }

    func uint __div__(uint me, uint other) {
        return me / other
    }

    func uint __neg__(uint me) {
        return -me
    }

    func uint __bor__(uint me, uint other) {
        return me | other
    }

    func uint __band__(uint me, uint other) {
        return me & other
    }

    func uint __bxor__(uint me, uint other) {
        return me ^ other
    }

    func uint __bnot__(uint me) {
        return ~me
    }

    func bool __gt__(uint me, uint other) {
        return me > other
    }

    func bool __gte__(uint me, uint other) {
        return me >= other
    }

    func bool __lt__(uint me, uint other) {
        return me < other
    }

    func bool __lte__(uint me, uint other) {
        return me <= other
    }

    func bool __dif__(uint me, uint other) {
        return me != other
    }

    func bool __equ__(uint me, uint other) {
        return me == other
    }
}

class __fixed__<uint scale> {
    func int __fixed__(fixed<scale> me) {
        return me >> uint_
    }

    func uint __fixed__(fixed<scale> me) {
        return me >> uint_
    }

    func fixed __add__(fixed<scale> me, fixed<scale> other) {
        return me + other
    }

    func fixed __sub__(fixed<scale> me, fixed<scale> other) {
        return me - other
    }

    func int __inc__(fixed<scale> me, int other) {
        copy = me
        me += 1 << uint_
        return copy
    }

    func int __dec__(fixed<scale> me, int other) {
        copy = me
        me -= 1 << uint_
        return copy
    }

    func fixed __shr__(fixed<scale> me, uint amount) {
        return me >> other
    }

    func fixed __shl__(fixed<scale> me, uint amount) {
        return me << other
    }

    func fixed __mlt__(fixed<scale> me, fixed<scale> other) {
        return (me * other) >> uint_
    }

    func fixed __div__(fixed<scale> me, fixed<scale> other) {
        return (me << uint_) / other
    }

    func fixed __neg__(fixed<scale> me) {
        return -me
    }

    func bool __gt__(fixed<scale> me, fixed<scale> other) {
        return me > other
    }

    func bool __gte__(fixed<scale> me, fixed<scale> other) {
        return me >= other
    }

    func bool __lt__(fixed<scale> me, fixed<scale> other) {
        return me < other
    }

    func bool __lte__(fixed<scale> me, fixed<scale> other) {
        return me <= other
    }

    func bool __dif__(fixed<scale> me, fixed<scale> other) {
        return me != other
    }

    func bool __equ__(fixed<scale> me, fixed<scale> other) {
        return me == other
    }
}

class __float__ {  // they are not being implemented in krimson
    func float __add__(float me, float other) {}

    func float __sub__(float me, float other) {}

    func float __mlt__(float me, float other) {}

    func float __div__(float me, float other) {}

    func float __neg__(float me) {}

    func bool __gt__(float me, float other) {}

    func bool __gte__(float me, float other) {}

    func bool __lt__(float me, float other) {}

    func bool __lte__(float me, float other) {}

    func bool __dif__(float me, float other) {}

    func bool __equ__(float me, float other) {}
}

class __char__ {
    func char __add__(char me, char other) {}

    func string __mlt__(char me, int amount) {}

    func bool __gt__(char me, char other) {}

    func bool __gte__(char me, char other) {}

    func bool __lt__(char me, char other) {}

    func bool __lte__(char me, char other) {}

    func bool __dif__(char me, char other) {}

    func bool __equ__(char me, char other) {}
}

class __string__ {
    func char __get__(string me, uint index) {}

    func string __add__(string me, string other) {}

    func string __add__(string me, char other) {}

    func string __mlt__(string me, int amount) {}

    func bool __gt__(string me, string other) {}

    func bool __gte__(string me, string other) {}

    func bool __lt__(string me, string other) {}

    func bool __lte__(string me, string other) {}

    func bool __dif__(string me, string other) {}

    func bool __equ__(string me, string other) {}
}

class __array__<T> {
    func array<T> __add__(array<T> me, array<T> other) {}

    func array<T> __add__(array<T> me, T other) {}

    func bool __dif__(array<T> me, array other) {}

    func bool __equ__(array<T> me, array other) {}
}
