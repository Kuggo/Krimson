//Exception mapping
macro NullPointer = 1
macro IndexOutOfBounds = 2
macro ArithmeticError = 3


// built-in Global Variables
macro BITS = 16


// built-in functions

func null __free__(T obj) {

}

func null print(int n) {
    urcl {
        "LLOD R1 SP 1"
        "OUT %NUM R1"
    }
}

func null print(uint n) {
    urcl {
        "LLOD R1 SP 1"
        "OUT %NUM R1"
    }
}

func null print(char c) {
    urcl {
        "LLOD R1 SP 1"
        "OUT %TEXT R1"
    }
}

func null print(string s) {
    urcl {
        "LLOD R1 SP 1"
        "SUB R2 R1 4"     // accessing its metadata (length)
        "LOD R2 R2"
        "SUB R2 R2 4"     // subtracting metadata space
        "LOD $3 $1"       // overwriting BP should be illegal but here it's fine because I know what im doing B)
        "OUT %TEXT $3"
        "INC $1 $1"
        "DEC $2 $2"
        "BNZ ~-4 $2"
    }

    // or it could be written mostly in krimson

    //for (int i = 0; i < s.length; i++) {
    //    print(s[i])
    //}
}

func null display(uint x, uint y, uint color = 1) {
    urcl {
        "LLOD R1 SP 1"
        "OUT %X R1"
        "LLOD R1 SP 2"
        "OUT %Y R1"
        "LLOD R1 SP 3"
        "OUT %COLOR R1"
    }
}


// Default Classes

class __bool__ {
    func bool __or__(bool other) {
        return this || other
    }

    func bool __and__(bool other) {
        return this && other
    }

    func bool __xor__(bool other) {
        return this ^ other
    }

    func bool __not__() {
        return !this
    }
}

class __int__ {
    func uint __uint__() {
        return this
    }

    func int __add__(int other) {
        return this + other
    }

    func int __sub__(int other) {
        return this - other
    }

    func int __inc__() {
        return this++
    }

    func int __dec__() {
        return this--
    }

    func int __shr__(uint amount) {
        return this >> other
    }

    func int __shl__(uint amount) {
        return this << other
    }

    func int __mlt__(int other) {
        return this * other
    }

    func int __div__(int other) {
        return this / other
    }

    func int __neg__() {
        return -this
    }

    func int __bor__(int other) {
        return this | other
    }

    func int __band__(int other) {
        return this & other
    }

    func int __bxor__(int other) {
        return this ^ other
    }

    func int __bnot__() {
        return ~this
    }

    func bool __gt__(int other) {
        return this > other
    }

    func bool __gte__(int other) {
        return this >= other
    }

    func bool __lt__(int other) {
        return this < other
    }

    func bool __lte__(int other) {
        return this <= other
    }

    func bool __dif__(int other) {
        return this != other
    }

    func bool __equ__(int other) {
        return this == other
    }
}

class __uint__ {
    func int __uint__() {
        return this
    }

    func uint __add__(uint other) {
        return this + other
    }

    func uint __sub__(uint other) {
        return this - other
    }

    func int __inc__() {
        return this++
    }

    func int __dec__() {
        return this--
    }

    func uint __shr__(uint amount) {
        return this >> other
    }

    func uint __shl__(uint amount) {
        return this << other
    }

    func uint __mlt__(uint other) {
        return this * other
    }

    func uint __div__(uint other) {
        return this / other
    }

    func uint __neg__() {
        return -this
    }

    func uint __bor__(uint other) {
        return this | other
    }

    func uint __band__(uint other) {
        return this & other
    }

    func uint __bxor__(uint other) {
        return this ^ other
    }

    func uint __bnot__() {
        return ~this
    }

    func bool __gt__(uint other) {
        return this > other
    }

    func bool __gte__(uint other) {
        return this >= other
    }

    func bool __lt__(uint other) {
        return this < other
    }

    func bool __lte__(uint other) {
        return this <= other
    }

    func bool __dif__(uint other) {
        return this != other
    }

    func bool __equ__(uint other) {
        return this == other
    }
}

class __fixed__ {
    macro FP_scale = 8

    // type conversions
    func int __fixed__() {
        return this >> FP_scale
    }

    func uint __fixed__() {
        return this >> FP_scale
    }

    // dunder methods
    func fixed __add__(fixed other) {
        return this + other
    }

    func fixed __sub__(fixed other) {
        return this - other
    }

    func int __inc__() {
        copy = this
        this += 1 << FP_scale
        return copy
    }

    func int __dec__() {
        copy = this
        this -= 1 << FP_scale
        return copy
    }

    func fixed __shr__(uint amount) {
        return this >> other
    }

    func fixed __shl__(uint amount) {
        return this << other
    }

    func fixed __mlt__(fixed other) {
        return (this * other) >> FP_scale
    }

    func fixed __div__(fixed other) {
        return (this << FP_scale) / other
    }

    func fixed __neg__() {
        return -this
    }

    func bool __gt__(fixed other) {
        return this > other
    }

    func bool __gte__(fixed other) {
        return this >= other
    }

    func bool __lt__(fixed other) {
        return this < other
    }

    func bool __lte__(fixed other) {
        return this <= other
    }

    func bool __dif__(fixed other) {
        return this != other
    }

    func bool __equ__(fixed other) {
        return this == other
    }
}

class __float__ {  // they are not being implemented in krimson
    func float __add__(float other) {}

    func float __sub__(float other) {}

    func float __mlt__(float other) {}

    func float __div__(float other) {}

    func float __neg__() {}

    func bool __gt__(float other) {}

    func bool __gte__(float other) {}

    func bool __lt__(float other) {}

    func bool __lte__(float other) {}

    func bool __dif__(float other) {}

    func bool __equ__(float other) {}
}

class __char__ {
    func char __add__(char other) {}

    func string __mlt__(cint amount) {}

    func bool __gt__(char other) {}

    func bool __gte__(char other) {}

    func bool __lt__(char other) {}

    func bool __lte__(char other) {}

    func bool __dif__(char other) {}

    func bool __equ__(char other) {}
}

class __string__ {

    func null __del__() {}

    func string __add__(string other) {}

    func string __add__(char other) {}

    func string __mlt__(int amount) {}

    func bool __gt__(string other) {}

    func bool __gte__(string other) {}

    func bool __lt__(string other) {}

    func bool __lte__(string other) {}

    func bool __dif__(string other) {}

    func bool __equ__(string other) {}

    func char __get__(uint index) {}

    func char __get__(int index) {}

}

class __array__<T> {

    func null __del__() {

    }

    func array<T> __add__(array<T> other) {}

    func array<T> __add__(T other) {}


    func bool __dif__(array other) {

    }

    func bool __equ__(array other) {

    }

    func T __get__(uint index) {
        urcl {
            "LLOD R1 SP 1"
            "LLOD R1 R1 -4"
            "SUB R1 R1 4"
            "LLOD R2 SP 2"
            "BRL ~+3 R2 R1"
            "IMM R2 2"  // out of bounds exception
            "RET"
            "LLOD R1 SP 1"
            "ADD R1 R1 R2"
            "LOD R1 R1"
        }
    }

    func T __get__(int index) {
        urcl {
            "LLOD R1 SP 1"
            "LLOD R1 R1 -4"
            "SUB R1 R1 4"
            "LLOD R2 SP 2"
            "BRP ~+5 R2"
            "ADD R2 R2 R1"
            "BRP ~+3 R2"
            "IMM R2 2"  // out of bounds exception
            "RET"
            "BRL ~+3 R2 R1"
            "IMM R2 2"  // out of bounds exception
            "RET"
            "LLOD R1 SP 1"
            "ADD R1 R1 R2"
            "LOD R1 R1"
            "IMM R2 0"
        }
    }
}
