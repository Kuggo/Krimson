/*
coord: type = {
    x: nat
    y: nat
}
coord[T]: type = {
    x: T
    y: T
}

AllowedOptions: type = {
  | NoSizeOption
  | AliasOption = int
  | TupleOption = (int, int)
  | ProductOption = {x: int y: int}
  | EnumInception = {
      | A
      | B
    }
}*/

int: type = ()

f: int -> int
f: int -> nat

var: int = f(1)
v: _ = 1

//var: {True | False | Maybe} = {True | False | Maybe}.Maybe
// TODO need to fix enum variant construction

//var: {i_c = {x: int, y: int} | f_c = {x: frac, y: frac}} = {x: 1 y: 2}
