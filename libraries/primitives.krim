// TODO add all the implementation for the methods if necessary


bool: type = {}

__or__: (self: bool, other: bool) -> out: bool

__and__: (self: bool, other: bool) -> out: bool

__xor__: (self: bool, other: bool) -> out: bool

__not__: (self: bool) -> out: bool



nat: type = {}  // aka uint

__add__: (self: nat, other: nat) -> out: nat

__sub__: (self: nat, other: nat) -> out: nat

__shr__: (self: nat, amount: nat) -> out: nat

__shl__: (self: nat, amount: nat) -> out: nat

__mlt__: (self: nat, other: nat) -> out: nat

__div__: (self: nat, other: nat) -> out: nat

__neg__: (self: nat) -> out: nat

__bor__: (self: nat, other: nat) -> out: nat

__band__: (self: nat, other: nat) -> out: nat

__bxor__: (self: nat, other: nat) -> out: nat

__bnot__: (self: nat) -> out: nat

__gt__: (self: nat, other: nat) -> out: bool

__gte__(self: nat, other: nat) -> out: bool

__lt__(self: nat, other: nat) -> out: bool

__lte__(self: nat, other: nat) -> out: bool

__dif__(self: nat, other: nat) -> out: bool

__equ__(self: nat, other: nat) -> out: bool



int: type = {}

__add__: (self: int, other: int) -> out: int

__sub__: (self: int, other: int) -> out: int

__shr__: (self: int, amount: nat) -> out: int

__shl__: (self: int, amount: nat) -> out: int

__mlt__: (self: int, other: int) -> out: int

__div__: (self: int, other: int) -> out: int

__neg__: (self: int, other: int) -> out: int

__bor__: (self: int, other: int) -> out: int

__band__: (self: int, other: int) -> out: int

__bxor__: (self: int, other: int) -> out: int

__bnot__: (self: int, other: int) -> out: int

__gt__: (self: int, other: int) -> out: bool

__gte__: (self: int, other: int) -> out: bool

__lt__: (self: int, other: int) -> out: bool

__lte__: (self: int, other: int) -> out: bool

__dif__: (self: int, other: int) -> out: bool

__equ__: (self: int, other: int) -> out: bool


frac: type = {}    // aka fixed. To be used instead of floats

__add__: (self: frac, other: frac) -> out: frac

__sub__: (self: frac, other: frac) -> out: frac

__shr__: (self: frac, amount: nat) -> out: frac

__shl__: (self: frac, amount: nat) -> out: frac

__mlt__: (self: frac, other: frac) -> out: frac

__div__: (self: frac, other: frac) -> out: frac

__neg__: (self: frac) -> out: frac

__gt__: (self: frac, other: frac) -> out: bool

__gte__: (self: frac, other: frac) -> out: bool

__lt__: (self: frac, other: frac) -> out: bool

__lte__: (self: frac, other: frac) -> out: bool

__dif__: (self: frac, other: frac) -> out: bool

__equ__: (self: frac, other: frac) -> out: bool



char: type = {}

__add__: (self: char, other: char) -> out: str

__mlt__: (self: char, amount: int) -> out: str

__gt__: (self: char, other: char) -> out: bool

__gte__: (self: char, other: char) -> out: bool

__lt__: (self: char, other: char) -> out: bool

__lte__: (self: char, other: char) -> out: bool

__dif__: (self: char, other: char) -> out: bool

__equ__: (self: char, other: char) -> out: bool



array: type = {}

__add__: (self: array, other: array) -> out: array

__add__: (self: array, other: T) -> out: array

__get__: (nat index) -> out: T

__set__: (nat index, T value) -> ()

__dif__: (self: array, other: array) -> out: bool

__equ__: (self: array, other: array) -> out: bool



str: type = array[char]

/*
__get__: (self: str, index: nat) -> out: char

__add__: (self: str, c: char) -> out: str

__add__: (self: str, other: str) -> out: str

__mlt__: (self: str, amount: nat) -> out: str

__gt__: (self: str, other: str) -> out: bool

__gte__: (self: str, other: str) -> out: bool

__lt__: (self: str, other: str) -> out: bool

__lte__: (self: str, other: str) -> out: bool

__dif__: (self: str, other: str) -> out: bool

__equ__: (self: str, other: str) -> out: bool
*/


